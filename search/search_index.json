{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GesEnterprise The following documentation contains development information for the GesEnterprise software. API Development information is located here","title":"Welcome to GesEnterprise"},{"location":"#welcome-to-gesenterprise","text":"The following documentation contains development information for the GesEnterprise software.","title":"Welcome to GesEnterprise"},{"location":"#api","text":"Development information is located here","title":"API"},{"location":"development/","text":"Development When developing/coding follow the Coding Standards For API development see here For Database work and maintenance see here For Web development see here","title":"Development"},{"location":"development/#development","text":"When developing/coding follow the Coding Standards For API development see here For Database work and maintenance see here For Web development see here","title":"Development"},{"location":"development/DEVNOTES/","text":"DevNotes TO BE REMOVED Schema: employees table: _id empNum empIdent companyId name role email phoneNum password vatId ssNum active type empMovements table _id empId time action company table _id codeLetter name legalName nif ssNum location logs _id empId action time ip Type/Permissions Levels admin : * Company Admin hr : * HR employees (allow salary and user management) accounting : * Accounting/Treasury employees (allow finance movements) employee : * Employee page only * Can edit: * Email, password * Can see: * All financial documents and their dates (salaries, bonus, etc) * a * Can request: * Vacations * Legal Documents Routes /employee/* Employee related stuff such as editing email password and checking the documents (salaries, etc) /accounting/* Send invoices and accounting stuff (banking, etc) /hr/* Salaries, approval of vacations, etc","title":"DevNotes"},{"location":"development/DEVNOTES/#devnotes","text":"TO BE REMOVED","title":"DevNotes"},{"location":"development/DEVNOTES/#schema","text":"","title":"Schema:"},{"location":"development/DEVNOTES/#employees-table","text":"_id empNum empIdent companyId name role email phoneNum password vatId ssNum active type empMovements table _id empId time action company table _id codeLetter name legalName nif ssNum location logs _id empId action time ip","title":"employees table:"},{"location":"development/DEVNOTES/#typepermissions-levels","text":"admin : * Company Admin hr : * HR employees (allow salary and user management) accounting : * Accounting/Treasury employees (allow finance movements) employee : * Employee page only * Can edit: * Email, password * Can see: * All financial documents and their dates (salaries, bonus, etc) * a * Can request: * Vacations * Legal Documents","title":"Type/Permissions Levels"},{"location":"development/DEVNOTES/#routes","text":"/employee/* Employee related stuff such as editing email password and checking the documents (salaries, etc) /accounting/* Send invoices and accounting stuff (banking, etc) /hr/* Salaries, approval of vacations, etc","title":"Routes"},{"location":"development/coding-standards/","text":"Coding Standards When contributing to GesEnterprise please follow the standards below. Based on Marlin Coding Standards Coding Style Indentation Use 2 spaces* and don't use tabs for indentation. Set your editor to use 2 spaces!! For VS Code it can be changed on the bottom right corner * Except for documentation since MKDocs requires 4 spaces for lists if ( user . type = \"employee\" ) { console . log ( \"User is employee\" ); } Brace-style If vertical spacing makes code more readable, add one extra blank line rather than using a different brace style. Known by the Ancients as \"One True Brace Style\" Place opening braces at the end of the line: if (a == 1) { Do the same for a declaration line: function pizza(slices) { Vertically align closing braces to the opening line. Example: function pizza ( slices ) { if ( slices > 2 ) { ... } else { ... } switch ( slices ) { // For small amounts of code make it into a one-liner case 1 : console . log ( \"1 Slice\" ); break ; case 2 : console . log ( \"2 Slices\" ); break ; case 3 : console . log ( \"3 Slices\" ); break ; // For big-ish amounts of code use the following style of a case case 4 : console . log ( \"4 Slices\" ); ... break ; case default : console . log ( \"No good slices\" ); break ; } } Whitespace and semicolons Unlike in C, whitespace in JavaScript source can directly impact semantics. Semicolons end statements in JavaScript. Because of automatic semicolon insertion (ASI), some statements that are well formed when a newline is parsed will be considered complete, as if a semicolon were inserted just prior to the newline. Therefore, to avoid any weird cases, semicolons are mandatory. let semi = \"Semicolon please\" ; Spacing One space after control keywords: if (\u2026) , while (\u2026) , do {\u2026} while(\u2026) , switch (\u2026) etc. No space between a function and its arguments: let val = pizza(\u2026) ; Use one space around (on each side of) for variables: let myVar = aVar + bVar * cVar; const myVal = (a * b + b * c); Commenting Comments are good, but avoid over-commenting. Never try to explain how your code works in a comment: it\u2019s much better to write the code so that the working is obvious, and it\u2019s a waste of time to explain badly written code. Generally, you want your comments to explain what your code does, not how. Keep comments inside a function body short. If a function is so complex that you need to separately comment parts of it, consider splitting it up into simpler units. Make small comments to note or warn about something particularly clever (or ugly), but avoid excess. Reserve detailed comments for the head of the function, explaining what it does, and possibly why it does it. Use JSDoc-style comments for functions, classes, and other defined entities. /** * Represents a book. * @function * @param {string} title - The title of the book. * @param {string} author - The author of the book. */ function book ( title , author ) { ... } Use the single-line style comments with // for comments under 3 lines. // A short comment should only // take a maximum of 3 lines. // Else use a multi-line comment For comments over 3 lines use the multi-line/comment block. /* The following does not work due to the fact that the pizzas are too old to be good enough. Therefore support has been dropped for pizzas, this come remains for legacy purposes. Also, say hello to multi-line comments. */ Variables Naming Use simple names for variables Use Camel Case when naming variables: const camelCase = \"hi\"; let pizzaSlices = 2; Types Variables should not be var or no identifier (as this will make it global). Use let and const for variables","title":"Coding Standards"},{"location":"development/coding-standards/#coding-standards","text":"When contributing to GesEnterprise please follow the standards below. Based on Marlin Coding Standards","title":"Coding Standards"},{"location":"development/coding-standards/#coding-style","text":"","title":"Coding Style"},{"location":"development/coding-standards/#indentation","text":"Use 2 spaces* and don't use tabs for indentation. Set your editor to use 2 spaces!! For VS Code it can be changed on the bottom right corner * Except for documentation since MKDocs requires 4 spaces for lists if ( user . type = \"employee\" ) { console . log ( \"User is employee\" ); }","title":"Indentation"},{"location":"development/coding-standards/#brace-style","text":"If vertical spacing makes code more readable, add one extra blank line rather than using a different brace style. Known by the Ancients as \"One True Brace Style\" Place opening braces at the end of the line: if (a == 1) { Do the same for a declaration line: function pizza(slices) { Vertically align closing braces to the opening line.","title":"Brace-style"},{"location":"development/coding-standards/#example","text":"function pizza ( slices ) { if ( slices > 2 ) { ... } else { ... } switch ( slices ) { // For small amounts of code make it into a one-liner case 1 : console . log ( \"1 Slice\" ); break ; case 2 : console . log ( \"2 Slices\" ); break ; case 3 : console . log ( \"3 Slices\" ); break ; // For big-ish amounts of code use the following style of a case case 4 : console . log ( \"4 Slices\" ); ... break ; case default : console . log ( \"No good slices\" ); break ; } }","title":"Example:"},{"location":"development/coding-standards/#whitespace-and-semicolons","text":"Unlike in C, whitespace in JavaScript source can directly impact semantics. Semicolons end statements in JavaScript. Because of automatic semicolon insertion (ASI), some statements that are well formed when a newline is parsed will be considered complete, as if a semicolon were inserted just prior to the newline. Therefore, to avoid any weird cases, semicolons are mandatory. let semi = \"Semicolon please\" ;","title":"Whitespace and semicolons"},{"location":"development/coding-standards/#spacing","text":"One space after control keywords: if (\u2026) , while (\u2026) , do {\u2026} while(\u2026) , switch (\u2026) etc. No space between a function and its arguments: let val = pizza(\u2026) ; Use one space around (on each side of) for variables: let myVar = aVar + bVar * cVar; const myVal = (a * b + b * c);","title":"Spacing"},{"location":"development/coding-standards/#commenting","text":"Comments are good, but avoid over-commenting. Never try to explain how your code works in a comment: it\u2019s much better to write the code so that the working is obvious, and it\u2019s a waste of time to explain badly written code. Generally, you want your comments to explain what your code does, not how. Keep comments inside a function body short. If a function is so complex that you need to separately comment parts of it, consider splitting it up into simpler units. Make small comments to note or warn about something particularly clever (or ugly), but avoid excess. Reserve detailed comments for the head of the function, explaining what it does, and possibly why it does it. Use JSDoc-style comments for functions, classes, and other defined entities. /** * Represents a book. * @function * @param {string} title - The title of the book. * @param {string} author - The author of the book. */ function book ( title , author ) { ... } Use the single-line style comments with // for comments under 3 lines. // A short comment should only // take a maximum of 3 lines. // Else use a multi-line comment For comments over 3 lines use the multi-line/comment block. /* The following does not work due to the fact that the pizzas are too old to be good enough. Therefore support has been dropped for pizzas, this come remains for legacy purposes. Also, say hello to multi-line comments. */","title":"Commenting"},{"location":"development/coding-standards/#variables","text":"","title":"Variables"},{"location":"development/coding-standards/#naming","text":"Use simple names for variables Use Camel Case when naming variables: const camelCase = \"hi\"; let pizzaSlices = 2;","title":"Naming"},{"location":"development/coding-standards/#types","text":"Variables should not be var or no identifier (as this will make it global). Use let and const for variables","title":"Types"},{"location":"development/api/","text":"Info Project has ESLint active","title":"Info"},{"location":"development/api/#info","text":"Project has ESLint active","title":"Info"},{"location":"development/db/","text":"","title":"Index"},{"location":"development/db/schema/employees/","text":"employees employees Collection: _id empNum companyId name role email phoneNum password vatId ssNum active type _id: Unique MongoDB document id (ObjectId) empNum: Company Letter + Employee Number companyId: ObjectId for the Company on another collection name: Full legal name role: Role in the company email: Employee email (for notifications) phoneNum: Phone number in international format password: SHA256+Salt encrypted password vatId: Vat ID for Tax/IRS purposes ssNum: Social Security Number active: Does person still work at the company? type: admin: Company IT Admin hr: HR Employees accounting: Accounting Employees employee: A employee","title":"employees"},{"location":"development/db/schema/employees/#employees","text":"","title":"employees"},{"location":"development/db/schema/employees/#employees-collection","text":"_id empNum companyId name role email phoneNum password vatId ssNum active type _id: Unique MongoDB document id (ObjectId) empNum: Company Letter + Employee Number companyId: ObjectId for the Company on another collection name: Full legal name role: Role in the company email: Employee email (for notifications) phoneNum: Phone number in international format password: SHA256+Salt encrypted password vatId: Vat ID for Tax/IRS purposes ssNum: Social Security Number active: Does person still work at the company? type: admin: Company IT Admin hr: HR Employees accounting: Accounting Employees employee: A employee","title":"employees Collection:"},{"location":"development/db/schema/sessions/","text":"sessions sessions Collection _id empId sessionId sessionDate _id: Unique ObjectId empId: Employee ObjectId sessionId: Session Id for user validation/login sessionDate: Initial date, valid up to 120 minutes (will be deleted by either a pm2 or cron job)","title":"sessions"},{"location":"development/db/schema/sessions/#sessions","text":"","title":"sessions"},{"location":"development/db/schema/sessions/#sessions-collection","text":"_id empId sessionId sessionDate _id: Unique ObjectId empId: Employee ObjectId sessionId: Session Id for user validation/login sessionDate: Initial date, valid up to 120 minutes (will be deleted by either a pm2 or cron job)","title":"sessions Collection"},{"location":"development/web/","text":"","title":"Index"}]}